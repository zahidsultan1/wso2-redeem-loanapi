<?xml version="1.0" encoding="UTF-8"?>
<sequence xmlns="http://ws.apache.org/ns/synapse" name="LOYALITY_BALANCES_DADICATESACOUNTS_INSEQUENCE">
	<sequence key="GenericRemoveHeaders"/>
	<property expression="json-eval($.productName)" name="productName" scope="default" type="STRING"/>
	<property expression="json-eval($.partnerName)" name="partnerName" scope="default" type="STRING"/>
	<property expression="json-eval($.ID)" name="TRANSACTION_ID" scope="default" type="STRING"/>
	<property expression="json-eval($.MSISDN)" name="MSISDN" scope="default" type="STRING"/>
	<property expression="json-eval($.DAID1)" name="daid1" scope="default" type="STRING"/>
	<property expression="json-eval($.DAID2)" name="daid2" scope="default" type="STRING"/>
	<property expression="$trp:ApplicationName" name="ApplicationName" scope="default" type="STRING" xmlns:ns="http://org.apache.synapse/xsd"/>
	<property name="AuthorizationHeader" scope="default" type="STRING" expression="$trp:AuthorizationHeader"/>
	<property name="AutoMode" scope="default" type="STRING" value="true"/>
	<log level="custom">
		<property expression="fn:concat('JAZZ_ADVANCE_VIEW | ',get-property('ApplicationName'))" name="API_NAME" scope="default" type="STRING" xmlns:ns="http://org.apache.synapse/xsd"/>
	</log>
	<property expression="$ctx:TRANSACTION_ID" name="TRANSACTION_ID" scope="default" type="STRING" xmlns:ns="http://org.apache.synapse/xsd"/>
	<property expression="fn:concat('JAZZ_ADVANCE_VIEW | ',get-property('ApplicationName'))" name="API_NAME" scope="default" type="STRING" xmlns:ns="http://org.apache.synapse/xsd"/>
	<property value="JAZZ_ADVANCE_VIEW" name="API_NAME_LOG" scope="default" type="STRING" xmlns:ns="http://org.apache.synapse/xsd"/>
	<property expression="$ctx:ApplicationName" name="APP_NAME" scope="default" type="STRING" xmlns:ns="http://org.apache.synapse/xsd"/>
	<property name="INTERFACE_NAME" scope="default" type="STRING" value="REQUEST"/>
	<property expression="$ctx:MSISDN" name="MSISDN" scope="default" type="STRING" xmlns:ns="http://org.apache.synapse/xsd"/>
	<property expression="get-property('SYSTEM_DATE', 'yyyy-MM-dd HH:mm:ss.SSS')" name="REQUEST_TIME" scope="default" type="STRING" xmlns:ns="http://org.apache.synapse/xsd"/>
	<property expression="fn:concat($trp:X-Forwarded-For,get-property('To'))" name="RESOURCE_URI" scope="default" type="STRING" xmlns:ns="http://org.apache.synapse/xsd"/>
	<property expression="fn:concat('ProductName: ',$ctx:productName,' | PartnerName: ',$ctx:partnerName,' | TRANSACTION_ID: ',$ctx:TRANSACTION_ID,' | MSISDN: ',$ctx:MSISDN,' | daid1: ',$ctx:daid1,' | daid2: ',$ctx:daid2)" name="REQUEST" scope="default" type="STRING" xmlns:ns="http://org.apache.synapse/xsd"/>
	<sequence key="LOYALTY_MSA_LOG_REQUEST"/>
	<filter regex="^\d{1,20}$" source="$ctx:TRANSACTION_ID" xmlns:ns="http://org.apache.synapse/xsd">
		<then/>
		<else>
			<payloadFactory media-type="json">
				<format>{"error":{ "errorCode": "$1", "description": "Ensure that the transaction id must not be empty or less than 20 digits.", "message": "Invalid transaction Id.", "transaction": { "transactionId": "$2" } }}</format>
				<args>
					<arg evaluator="xml" value="1001" literal="false"/>
					<arg evaluator="xml" expression="$ctx:TRANSACTION_ID" literal="false"/>
				</args>
			</payloadFactory>
			<property name="INTERFACE_NAME" scope="default" type="STRING" value="RESPONSE"/>
			<property expression="get-property('SYSTEM_DATE', 'yyyy-MM-dd HH:mm:ss.SSS')" name="RESPONSETIME" scope="default" type="STRING"/>
			<property name="LOG_RESPONSE_STATUS" scope="default" type="STRING" value="KO"/>
			<property expression="json-eval($)" name="RESPONSE" scope="default" type="STRING"/>
			<sequence key="LOYALTY_MSA_LOG_RESPONSE"/>
			<respond/>
		</else>
	</filter>
	<filter xmlns:ns="http://org.apache.synapse/xsd" xpath="fn:boolean(fn:string-length($ctx:daid1) = 0) or $ctx:AutoMode='false'">
		<then>
			<property name="daid1" scope="default" type="STRING" value="16"/>
		</then>
		<else/>
	</filter>
	<filter xmlns:ns="http://org.apache.synapse/xsd" xpath="fn:boolean(fn:string-length($ctx:daid2) = 0) or $ctx:AutoMode='false'">
		<then>
			<property name="daid2" scope="default" type="STRING" value="17"/>
		</then>
		<else/>
	</filter>
	<property expression="$ctx:MSISDN" name="uri.var.msisdn" scope="default" type="STRING" xmlns:ns="http://org.apache.synapse/xsd"/>
	<property expression="$ctx:uri.var.msisdn" name="REQUEST" scope="default" type="STRING" xmlns:ns="http://org.apache.synapse/xsd"/>
	<property expression="get-property('SYSTEM_DATE', 'yyyy-MM-dd HH:mm:ss.SSS')" name="REQUEST_TIME" scope="default" type="STRING" xmlns:ns="http://org.apache.synapse/xsd"/>
	<filter xmlns:ns="http://org.apache.synapse/xsd" source="$ctx:AuthorizationHeader" regex="Basic SU5UQUNBR0Q6UGF0Y2gjMTIz">
		<then>
			<property name="MSISDN" expression="$ctx:uri.var.msisdn" scope="default" type="STRING"/>
			<property name="TRANSACTION_ID_IN" expression="get-property('SYSTEM_TIME')" scope="default" type="STRING"/>
			<filter xpath="fn:contains($ctx:MSISDN,'92')">
				<then/>
				<else>
					<log level="custom">
						<property name="MSISDN " value="Format Is InValid"/>
					</log>
					<payloadFactory media-type="json">
						<format>{"error":{ "errorCode": $1, "description": "$2", "message": "$3", "transaction": { "transactionId": "$4" } }}</format>
						<args>
							<arg value="404"/>
							<arg value="MSISDN Format Is Invalid"/>
							<arg value="Please Enter MSISDN With 92"/>
							<arg evaluator="xml" expression="$ctx:TRANSACTION_ID_IN"/>
						</args>
					</payloadFactory>
					<property name="ID" expression="$ctx:TRANSACTION_id"/>
					<property name="API_NAME" expression="fn:concat('DADICATESACOUNTS | ',get-property('ApplicationName'))" scope="default" type="STRING"/>
					<property name="INTERFACE_NAME" value="RESPONSE"/>
					<property name="MSISDN" expression="$ctx:MSISDN"/>
					<property name="RESPONSETIME" expression="get-property('SYSTEM_DATE', 'yyyy-MM-dd HH:mm:ss.SSS')" scope="default"/>
					<property name="STATUS" value="KO"/>
					<property name="RESPONSE" expression="json-eval($)"/>
					<sequence key="LOYALTY_MSA_LOG_RESPONSE"/>
					<log level="custom">
						<property name="RESPONSE" expression="json-eval($)"/>
					</log>
					<respond/>
				</else>
			</filter>
			<log level="custom">
				<property name="ViewLoyaltyBalance " value="*********ViewLoyaltyBalance*********"/>
				<property name="Before Calling" value="Client Tell Api"/>
			</log>
			<property name="ID" expression="$ctx:TRANSACTION_id"/>
			<property name="API_NAME" expression="fn:concat('DADICATESACOUNTS | ',get-property('ApplicationName'))" scope="default" type="STRING"/>
			<property name="INTERFACE_NAME" value="DBSS-CLINET-TELL"/>
			<property name="MSISDN" expression="$ctx:MSISDN"/>
			<property name="REQUEST_TIME" expression="get-property('SYSTEM_DATE', 'yyyy-MM-dd HH:mm:ss.SSS')" scope="default"/>
			<property name="RESOURCE_URI" expression="fn:concat($trp:X-Forwarded-For,get-property('To'),', REMOTE_SERVER:',get-property('axis2','REMOTE_ADDR'))" scope="default" type="STRING"/>
			<sequence key="LOYALTY_MSA_LOG_REQUEST"/>
			<call>
				<endpoint key="apc_clientele_preprod"/>
			</call>
			<log level="full"/>
			<property name="type" expression="json-eval($.included[1].attributes.business-model-type)"/>
			<property name="OPERATOR" expression="json-eval($.included[1].attributes.brand)"/>
			<log level="custom">
				<property name="After Calling" value="Client Tell Api"/>
				<property name="type" expression="json-eval($.included[1].attributes.business-model-type)"/>
				<property name="OPERATOR" expression="json-eval($.included[1].attributes.brand)"/>
			</log>
			<property name="ID" expression="$ctx:TRANSACTION_id"/>
			<property name="API_NAME" expression="fn:concat('DADICATESACOUNTS | ',get-property('ApplicationName'))" scope="default" type="STRING"/>
			<property name="INTERFACE_NAME" value="DBSS-CLINET-TELL"/>
			<property name="MSISDN" expression="$ctx:MSISDN"/>
			<property name="RESPONSETIME" expression="get-property('SYSTEM_DATE', 'yyyy-MM-dd HH:mm:ss.SSS')" scope="default"/>
			<property name="STATUS" value="OK"/>
			<property name="RESPONSE_TIME" expression="get-property('SYSTEM_DATE', 'yyyy-MM-dd HH:mm:ss.SSS')" scope="default"/>
			<property name="TYPE" expression="json-eval($.included[1].attributes.business-model-type)"/>
			<property name="RESPONSE" expression="json-eval($.included[1].attributes.business-model-type)"/>
			<sequence key="LOYALTY_MSA_LOG_RESPONSE"/>
			<property name="bool_Chk_type" expression="boolean(get-property('type'))"/>
			<filter source="$ctx:type" regex="unknown">
				<then>
					<payloadFactory media-type="json">
						<format>{"error":{ "errorCode": $1, "description": "$2", "message": "$3", "transaction": { "transactionId": "$4" } }}</format>
						<args>
							<arg value="405"/>
							<arg value="MSISDN Type Is Unknown"/>
							<arg value="Please Enter Other Prepaid MSISDN"/>
							<arg evaluator="xml" expression="$ctx:TRANSACTION_ID_IN"/>
						</args>
					</payloadFactory>
					<property name="ID" expression="$ctx:TRANSACTION_id"/>
					<property name="API_NAME" expression="fn:concat('DADICATESACOUNTS | ',get-property('ApplicationName'))" scope="default" type="STRING"/>
					<property name="INTERFACE_NAME" value="RESPONSE"/>
					<property name="MSISDN" expression="$ctx:MSISDN"/>
					<property name="RESPONSETIME" expression="get-property('SYSTEM_DATE', 'yyyy-MM-dd HH:mm:ss.SSS')" scope="default"/>
					<property name="STATUS" value="KO"/>
					<property name="RESPONSE" expression="json-eval($)"/>
					<sequence key="LOYALTY_MSA_LOG_RESPONSE"/>
					<log level="custom">
						<property name="RESPONSE" expression="json-eval($)"/>
					</log>
					<respond/>
				</then>
				<else/>
			</filter>
			<filter source="$ctx:bool_Chk_type" regex="false">
				<then>
					<payloadFactory media-type="json">
						<format>{"error":{ "errorCode": $1, "description": "$2", "message": "$3", "transaction": { "transactionId": "$4" } }}</format>
						<args>
							<arg value="406"/>
							<arg value="MSISDN Type is Empty"/>
							<arg value="Please Enter Other Prepaid MSISDN"/>
							<arg evaluator="xml" expression="$ctx:TRANSACTION_ID_IN"/>
						</args>
					</payloadFactory>
					<property name="ID" expression="$ctx:TRANSACTION_id"/>
					<property name="API_NAME" expression="fn:concat('DADICATESACOUNTS | ',get-property('ApplicationName'))" scope="default" type="STRING"/>
					<property name="INTERFACE_NAME" value="RESPONSE"/>
					<property name="MSISDN" expression="$ctx:MSISDN"/>
					<property name="RESPONSETIME" expression="get-property('SYSTEM_DATE', 'yyyy-MM-dd HH:mm:ss.SSS')" scope="default"/>
					<property name="STATUS" value="KO"/>
					<property name="RESPONSE" expression="json-eval($)"/>
					<sequence key="LOYALTY_MSA_LOG_RESPONSE"/>
					<log level="custom">
						<property name="RESPONSE" expression="json-eval($)"/>
					</log>
					<respond/>
				</then>
				<else/>
			</filter>
			<property name="NORMALIZED_MSISDN_FOR_IN" expression="fn:substring($ctx:MSISDN,3)"/>
			<property name="TRANSACTION_ID_IN" expression="get-property('SYSTEM_TIME')" scope="default" type="STRING"/>
			<property name="TRANSACTION_ID" expression="get-property('SYSTEM_TIME')" scope="default" type="STRING"/>
			<property name="CURR_DATE_TIME" expression="fn:concat(synapse:get-property('SYSTEM_DATE', 'yyyyMMdd'),'T',synapse:get-property('SYSTEM_DATE', 'HH:mm:ss+0500'))" scope="default" type="STRING"/>
			<payloadFactory media-type="xml">
				<format>
					<methodCall xmlns="">
						<methodName>GetBalanceAndDate</methodName>
						<params>
							<param>
								<value>
									<struct>
										<member>
											<name>originTransactionID</name>
											<value>
												<string>$2</string>
											</value>
										</member>
										<member>
											<name>originNodeType</name>
											<value>
												<string>EXT</string>
											</value>
										</member>
										<member>
											<name>originHostName</name>
											<value>
												<string>1</string>
											</value>
										</member>
										<member>
											<name>originTimeStamp</name>
											<value>
												<dateTime.iso8601>$3</dateTime.iso8601>
											</value>
										</member>
										<member>
											<name>subscriberNumber</name>
											<value>
												<string>$1</string>
											</value>
										</member>
									</struct>
								</value>
							</param>
						</params>
					</methodCall>
				</format>
				<args>
					<arg evaluator="xml" expression="$ctx:NORMALIZED_MSISDN_FOR_IN"/>
					<arg evaluator="xml" expression="$ctx:TRANSACTION_ID_IN"/>
					<arg evaluator="xml" expression="$ctx:CURR_DATE_TIME"/>
				</args>
			</payloadFactory>
			<header name="User-Agent" scope="transport" value="UGw Server/4.3/1.0"/>
			<header name="Authorization" scope="transport" value="Basic SU5UQVJDQU5BOjU2djM0R3oxL0FfMTgK"/>
			<property name="messageType" value="application/xml" scope="axis2" type="STRING"/>
			<property name="ContentType" value="text/xml" scope="axis2" type="STRING"/>
			<property name="DISABLE_CHUNKING" value="true" scope="axis2" type="STRING"/>
			<enrich>
				<source type="body" clone="true"/>
				<target type="property" property="IN_PAYLOADRequest"/>
			</enrich>
			<property name="ID" expression="$ctx:TRANSACTION_id"/>
			<property name="API_NAME" expression="fn:concat('DADICATESACOUNTS | ',get-property('ApplicationName'))" scope="default" type="STRING"/>
			<property name="INTERFACE_NAME" value="GETBALANCEANDDATE"/>
			<property name="MSISDN" expression="$ctx:MSISDN"/>
			<property name="REQUEST_TIME" expression="get-property('SYSTEM_DATE', 'yyyy-MM-dd HH:mm:ss.SSS')" scope="default"/>
			<property name="RESOURCE_URI" expression="fn:concat($trp:X-Forwarded-For,get-property('To'),', REMOTE_SERVER:',get-property('axis2','REMOTE_ADDR'))" scope="default" type="STRING"/>
			<property name="REQUEST" expression="$ctx:IN_PAYLOADRequest"/>
			<sequence key="LOYALTY_MSA_LOG_REQUEST"/>
			<property name="NO_KEEPALIVE" value="true" scope="axis2" type="STRING"/>
			<call>
				<endpoint key="APC_AIR_EP"/>
			</call>
			<property name="ContentType" value="application/xml" scope="axis2" type="STRING"/>
			<property name="IsClientDoingREST" value="true" scope="default" type="BOOLEAN"/>
			<enrich>
				<source type="body" clone="true"/>
				<target type="property" property="IN_PAYLOAD"/>
			</enrich>
			<property name="Responsecode" expression="//methodResponse/params/param/value/struct/member[name='responseCode']/value/i4/text()']" scope="default" type="STRING"/>
			<property name="STATUS" expression="$ctx:Responsecode"/>
			<property name="RESPONSE" expression="$ctx:IN_PAYLOAD"/>
			<property name="ID" expression="$ctx:TRANSACTION_id"/>
			<property name="API_NAME" expression="fn:concat('DADICATESACOUNTS | ',get-property('ApplicationName'))" scope="default" type="STRING"/>
			<property name="INTERFACE_NAME" value="GETBALANCEANDDATE"/>
			<property name="MSISDN" expression="$ctx:MSISDN"/>
			<property name="RESPONSETIME" expression="get-property('SYSTEM_DATE', 'yyyy-MM-dd HH:mm:ss.SSS')" scope="default"/>
			<property name="STATUS" value="OK"/>
			<property name="RESPONSE_TIME" expression="get-property('SYSTEM_DATE', 'yyyy-MM-dd HH:mm:ss.SSS')" scope="default"/>
			<sequence key="LOYALTY_MSA_LOG_RESPONSE"/>
			<property name="faultCode" expression="//methodResponse/fault/value/struct/member[name='faultCode']/value/i4/text()"/>
			<property name="faultDescription" expression="//methodResponse/fault/value/struct/member[name='faultString']/value/i4/text()"/>
			<log level="custom">
				<property name="After " value="Calling IN"/>
				<property name="ViewLoyaltyBalance " value="*********ViewLoyaltyBalance*********"/>
				<property name="faultCode" expression="//methodResponse/fault/value/struct/member[name='faultCode']/value/i4/text()"/>
				<property name="faultDescription" expression="//methodResponse/fault/value/struct/member[name='faultString']/value/i4/text()"/>
			</log>
			<property name="INResponseCode" expression="//methodResponse/params/param/value/struct/member[name='responseCode']/value/i4/text()']"/>
			<property name="INResponse" expression="//methodResponse/params/param/value/struct/member[name='offerInformationList']/value/array/data/value/struct/member[name='offerID']"/>
			<filter source="boolean($ctx:INResponse)" regex="true">
				<then>
					<property name="INResponseCode" expression="//methodResponse/params/param/value/struct/member[name='responseCode']/value/i4/text()']"/>
					<property name="INResponse" expression="//methodResponse/params/param/value/struct/member[name='offerInformationList']/value/array/data/value/struct/member[name='offerID']"/>
					<property name="balanceinrupees" expression="//methodResponse/params/param/value/struct/member[name='accountValue1']/value/string  div 100"/>
					<property name="STATUS" value="OK"/>
				</then>
				<else>
					<property name="faultCode" expression="//methodResponse/fault/value/struct/member[name='faultCode']/value/i4/text()"/>
					<property name="faultDescription" expression="//methodResponse/fault/value/struct/member[name='faultString']/value/i4/text()"/>
					<property name="STATUS" value="KO"/>
					<property name="INResponseCode" expression="//methodResponse/params/param/value/struct/member[name='responseCode']/value/i4/text()']"/>
				</else>
			</filter>
			<property name="StatusCode" expression="$axis2:HTTP_SC"/>
			<foreach expression="//methodResponse/params/param/value/struct/member[name='dedicatedAccountInformation']/value/array/data/value">
				<sequence>
					<property name="IN_FOREACH" value="***********"/>
					<property name="dedicatedAccountActiveValue1" expression="//struct/member[name='dedicatedAccountActiveValue1']/value/string/text()"/>
					<property name="dedicatedAccountID" expression="//struct/member[name='dedicatedAccountID']/value/i4/text()"/>
					<filter xpath="$ctx:dedicatedAccountID = $ctx:daid1">
						<then>
							<property name="dedicated_active_value1" expression="//struct/member[name='dedicatedAccountActiveValue1']/value/string/text()"/>
							<property name="dedicated_value1" expression="//struct/member[name='dedicatedAccountValue1']/value/string/text()"/>
							<property name="dedicated_unit_type1" expression="//struct/member[name='dedicatedAccountUnitType']/value/i4/text()"/>
							<property name="expiryDate1" expression="//struct/member[name='expiryDate']/value/dateTime.iso8601/text()"/>
							<property name="CheckDaID" value="True"/>
						</then>
					</filter>
					<filter xpath="$ctx:dedicatedAccountID = $ctx:daid2">
						<then>
							<property name="dedicated_active_value2" expression="//struct/member[name='dedicatedAccountActiveValue1']/value/string/text()"/>
							<property name="dedicated_value2" expression="//struct/member[name='dedicatedAccountValue1']/value/string/text()"/>
							<property name="dedicated_unit_type2" expression="//struct/member[name='dedicatedAccountUnitType']/value/i4/text()"/>
							<property name="expiryDate2" expression="//struct/member[name='expiryDate']/value/dateTime.iso8601/text()"/>
							<property name="CheckDaID" value="True"/>
						</then>
					</filter>
				</sequence>
			</foreach>
			<filter xpath="fn:boolean(fn:string-length($ctx:dedicated_value1) = 0) or $ctx:dedicated_value1 = 0">
				<then>
					<property name="dedicated_value1" value="0.0" scope="default"/>
				</then>
				<else>
					<script language="js">var no1= parseFloat(mc.getProperty('dedicated_value1')); var division = no1 / 100;         mc.setProperty("Result", division);</script>
					<property name="dedicated_value1" expression="$ctx:Result"/>
					<log level="custom">
						<property name="dedicated_value1" expression="fn:substring(get-property('dedicated_value1'), 1, fn:string-length(get-property('dedicated_value1')) - 2)"/>
						<property name="dedicated_value1" expression="$ctx:Result"/>
					</log>
				</else>
			</filter>
			<filter xpath="fn:boolean(fn:string-length($ctx:dedicated_value2) = 0) or $ctx:dedicated_value2 = 0">
				<then>
					<property name="dedicated_value2" value="0.0" scope="default"/>
				</then>
				<else>
					<script language="js">var no1= parseFloat(mc.getProperty('dedicated_value2')); var division = no1 / 100;         mc.setProperty("Result", division);</script>
					<property name="dedicated_value2" expression="$ctx:Result"/>
					<log level="custom">
						<property name="dedicated_value2" expression="fn:substring(get-property('dedicated_value2'), 1, fn:string-length(get-property('dedicated_value2')) - 2)"/>
						<property name="dedicated_value2" expression="$ctx:Result"/>
					</log>
				</else>
			</filter>
			<script language="js">var value1 = parseFloat(mc.getProperty('dedicated_value1'));
											  var value2 = parseFloat(mc.getProperty('dedicated_value2'));
											  var sum = value1 + value2;
											  mc.setProperty('dedicated_ids_sum', sum);</script>
			<property name="dedicated_ids_sum" expression="get-property('dedicated_ids_sum')" scope="default" type="STRING"/>
			<filter source="$ctx:StatusCode" regex="200">
				<then>
					<filter source="$ctx:INResponseCode" regex="0">
						<then>
							<filter source="$ctx:CheckDaID" regex="True">
								<then>
									<property name="messageType" value="application/json" scope="axis2"/>
									<property name="JSON_RESPONSE" expression="fn:concat('Balance:',$ctx:balanceinrupees)"/>
									<payloadFactory media-type="json">
										<format>{"Dedicated_Account_Informations" : [{"Dedicated_Account_ID" :"$1", "Dedicated_Account_Unit" : "$2", "Dedicated_Account_Value":"$3", "Dedicated_Account_ExpiryDate" : "$4"}, {"Dedicated_Account_ID" :"$5", "Dedicated_Account_Unit" : "$6", "Dedicated_Account_Value":"$7", "Dedicated_Account_ExpiryDate" : "$8"}],"Total_Dedicated_Accounts_Value":"$9"}</format>
										<args>
											<arg evaluator="xml" expression="$ctx:daid1"/>
											<arg evaluator="xml" expression="$ctx:dedicated_unit_type1"/>
											<arg evaluator="xml" expression="$ctx:dedicated_value1"/>
											<arg evaluator="xml" expression="$ctx:expiryDate1"/>
											<arg evaluator="xml" expression="$ctx:daid2"/>
											<arg evaluator="xml" expression="$ctx:dedicated_unit_type2"/>
											<arg evaluator="xml" expression="$ctx:dedicated_value2"/>
											<arg evaluator="xml" expression="$ctx:expiryDate2"/>
											<arg evaluator="xml" expression="$ctx:dedicated_ids_sum"/>
										</args>
									</payloadFactory>
									<property name="ID" expression="$ctx:TRANSACTION_id"/>
									<property name="API_NAME" expression="fn:concat('DADICATESACOUNTS | ',get-property('ApplicationName'))" scope="default" type="STRING"/>
									<property name="INTERFACE_NAME" value="RESPONSE"/>
									<property name="MSISDN" expression="$ctx:MSISDN"/>
									<property name="RESPONSETIME" expression="get-property('SYSTEM_DATE', 'yyyy-MM-dd HH:mm:ss.SSS')" scope="default"/>
									<property name="STATUS" value="OK"/>
									<property name="RESPONSE_TIME" expression="get-property('SYSTEM_DATE', 'yyyy-MM-dd HH:mm:ss.SSS')" scope="default"/>
									<property name="RESPONSE" expression="json-eval($)"/>
									<sequence key="LOYALTY_MSA_LOG_RESPONSE"/>
									<log level="custom">
										<property name="RESPONSE" expression="json-eval($)"/>
									</log>
									<respond/>
								</then>
								<else>
									<payloadFactory media-type="json">
										<format>{"error":{ "errorCode": $1, "description": "$2", "message": "$3", "transaction": { "transactionId": "$4" } , "DAID1":"$5" , "DAID2":"$6"}}</format>
										<args>
											<arg value="407"/>
											<arg value="MSISDN Do Not Have Dedicated Account IDs"/>
											<arg value="Please Enter Another Dedicated Account IDs"/>
											<arg evaluator="xml" expression="$ctx:TRANSACTION_ID_IN"/>
											<arg evaluator="xml" expression="$ctx:daid1"/>
											<arg evaluator="xml" expression="$ctx:daid2"/>
										</args>
									</payloadFactory>
									<property name="ID" expression="$ctx:TRANSACTION_id"/>
									<property name="API_NAME" expression="fn:concat('DADICATESACOUNTS | ',get-property('ApplicationName'))" scope="default" type="STRING"/>
									<property name="INTERFACE_NAME" value="RESPONSE"/>
									<property name="MSISDN" expression="$ctx:MSISDN"/>
									<property name="RESPONSETIME" expression="get-property('SYSTEM_DATE', 'yyyy-MM-dd HH:mm:ss.SSS')" scope="default"/>
									<property name="STATUS" value="KO"/>
									<property name="RESPONSE_TIME" expression="get-property('SYSTEM_DATE', 'yyyy-MM-dd HH:mm:ss.SSS')" scope="default"/>
									<property name="RESPONSE" expression="json-eval($)"/>
									<sequence key="LOYALTY_MSA_LOG_RESPONSE"/>
									<log level="custom">
										<property name="RESPONSE" expression="json-eval($)"/>
									</log>
									<respond/>
								</else>
							</filter>
						</then>
						<else>
							<payloadFactory media-type="json">
								<format>{"error":{ "errorCode": $1, "description": "", "message": "", "transaction": { "transactionId": "$2" } }}</format>
								<args>
									<arg evaluator="xml" expression="$ctx:INResponseCode"/>
									<arg evaluator="xml" expression="$ctx:TRANSACTION_ID_IN"/>
								</args>
							</payloadFactory>
							<property name="ID" expression="$ctx:TRANSACTION_id"/>
							<property name="API_NAME" expression="fn:concat('DADICATESACOUNTS | ',get-property('ApplicationName'))" scope="default" type="STRING"/>
							<property name="INTERFACE_NAME" value="RESPONSE"/>
							<property name="MSISDN" expression="$ctx:MSISDN"/>
							<property name="RESPONSETIME" expression="get-property('SYSTEM_DATE', 'yyyy-MM-dd HH:mm:ss.SSS')" scope="default"/>
							<property name="STATUS" value="KO"/>
							<property name="RESPONSE_TIME" expression="get-property('SYSTEM_DATE', 'yyyy-MM-dd HH:mm:ss.SSS')" scope="default"/>
							<property name="RESPONSE" expression="json-eval($)"/>
							<sequence key="LOYALTY_MSA_LOG_RESPONSE"/>
							<log level="custom">
								<property name="RESPONSE" expression="json-eval($)"/>
							</log>
							<respond/>
						</else>
					</filter>
				</then>
				<else>
					<payloadFactory media-type="json">
						<format>{"error":{ "errorCode": $1, "description": "$2", "message": "", "transaction": { "transactionId": "$3" } }}</format>
						<args>
							<arg evaluator="xml" expression="$ctx:faultCode"/>
							<arg evaluator="xml" expression="$ctx:faultDescription"/>
							<arg evaluator="xml" expression="$ctx:TRANSACTION_ID_IN"/>
						</args>
					</payloadFactory>
					<property name="ID" expression="$ctx:TRANSACTION_id"/>
					<property name="API_NAME" expression="fn:concat('DADICATESACOUNTS | ',get-property('ApplicationName'))" scope="default" type="STRING"/>
					<property name="INTERFACE_NAME" value="RESPONSE"/>
					<property name="MSISDN" expression="$ctx:MSISDN"/>
					<property name="RESPONSETIME" expression="get-property('SYSTEM_DATE', 'yyyy-MM-dd HH:mm:ss.SSS')" scope="default"/>
					<property name="STATUS" value="KO"/>
					<property name="RESPONSE_TIME" expression="get-property('SYSTEM_DATE', 'yyyy-MM-dd HH:mm:ss.SSS')" scope="default"/>
					<property name="RESPONSE" expression="json-eval($)"/>
					<sequence key="LOYALTY_MSA_LOG_RESPONSE"/>
					<log level="custom">
						<property name="RESPONSE" expression="json-eval($)"/>
					</log>
					<respond/>
				</else>
			</filter>
		</then>
		<else>
			<property name="HTTP_SC" value="401" scope="axis2"/>
			<payloadFactory media-type="json">
				<format>{"error":{ "errorCode": $1, "description": "$2", "message": "", "transaction": { "transactionId": "$3" } }}</format>
				<args>
					<arg value="401"/>
					<arg value="Invalid Token"/>
					<arg evaluator="xml" expression="$ctx:TRANSACTION_ID_IN"/>
				</args>
			</payloadFactory>
			<property name="ID" expression="$ctx:TRANSACTION_id"/>
			<property name="API_NAME" expression="fn:concat('DADICATESACOUNTS | ',get-property('ApplicationName'))" scope="default" type="STRING"/>
			<property name="INTERFACE_NAME" value="RESPONSE"/>
			<property name="MSISDN" expression="$ctx:MSISDN"/>
			<property name="RESPONSETIME" expression="get-property('SYSTEM_DATE', 'yyyy-MM-dd HH:mm:ss.SSS')" scope="default"/>
			<property name="STATUS" value="KO"/>
			<property name="RESPONSE_TIME" expression="get-property('SYSTEM_DATE', 'yyyy-MM-dd HH:mm:ss.SSS')" scope="default"/>
			<property name="RESPONSE" expression="json-eval($)"/>
			<sequence key="LOYALTY_MSA_LOG_RESPONSE"/>
			<log level="custom">
				<property name="RESPONSE" expression="json-eval($)"/>
			</log>
			<respond/>
		</else>
	</filter>
</sequence>
